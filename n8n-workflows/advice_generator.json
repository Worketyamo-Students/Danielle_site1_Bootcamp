{
  "name": "advice_generator",
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        1200,
        0
      ],
      "id": "1a941a58-e6f4-4a66-b782-697e69d3520b",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "model": "openai/gpt-oss-120b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1520,
        224
      ],
      "id": "5b7c4663-0454-41ec-ab62-3e3d9d79d59b",
      "name": "GPT-OSS:120b",
      "credentials": {
        "groqApi": {
          "id": "5CyEI7TlelUpYDI1",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Advice Request Preprocessor\nconst inputData = $input.all();\nconst requestData = inputData[0].json;\n\nconst query = requestData.query || '';\n\n// Categorize advice type\nlet adviceType = 'G√©n√©ral';\n\nif (query.match(/technique|m√©thode|comment faire/i)) {\n  adviceType = 'Technique';\n} else if (query.match(/ingr√©dient|substitut|remplacer/i)) {\n  adviceType = 'Ingr√©dients';\n} else if (query.match(/probl√®me|erreur|rat√©|trop/i)) {\n  adviceType = 'Probl√®me';\n} else if (query.match(/astuce|conseil|secret/i)) {\n  adviceType = 'Astuce';\n}\n\nreturn [{\n  query: query,\n  advice_type: adviceType,\n  timestamp: new Date().toISOString()\n}];"
      },
      "id": "fac86efb-4bf0-48f3-bea7-4314b057e8f0",
      "name": "Request Preprocessor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        0
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Question culinaire: {{ $json.query }}\n\nType de conseil d√©tect√©: {{ $json.advice_type }}\n\nR√©ponds avec un objet JSON structur√© de conseils d√©taill√©s.",
        "options": {
          "systemMessage": "Tu es TchopIA Advisor, expert en conseils culinaires camerounais. G√©n√®re des conseils au format JSON:\n\n{\n  \"advice_type\": \"Technique|Ingr√©dients|Probl√®me|Astuce|G√©n√©ral\",\n  \"main_advice\": \"Conseil principal d√©taill√© 200-300 mots\",\n  \"quick_tips\": [\"Astuce 1\", \"Astuce 2\", \"Astuce 3\"],\n  \"traditional_secrets\": [\"Secret 1\", \"Secret 2\"],\n  \"ingredients_focus\": {\n    \"recommended\": [\"Ingr√©dient 1\"],\n    \"substitutes\": [\"Alternative 1\"],\n    \"avoid\": [\"√Ä √©viter\"]\n  },\n  \"step_by_step\": [\n    {\"step\": 1, \"action\": \"Action\", \"tip\": \"Conseil\"}\n  ],\n  \"cultural_context\": \"Contexte culturel\",\n  \"common_mistakes\": [\"Erreur courante et solution\"],\n  \"seasonal_notes\": \"Notes saisonni√®res\",\n  \"difficulty_level\": \"D√©butant|Interm√©diaire|Avanc√©\",\n  \"estimated_time\": \"Temps\"\n}\n\nEXIGENCES:\n- Conseils pratiques et applicables\n- Respect traditions camerounaises\n- Solutions concr√®tes\n- JSON valide uniquement"
        }
      },
      "id": "e9a29a03-7020-40a2-9d3e-8cd88a8f2d86",
      "name": "Advice AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1664,
        0
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// üîß ULTRA-ENHANCED Advice Response Parser v3.0 - Handles Escaped Strings\nconst inputData = $input.all();\nconst aiResponse = inputData[0].json;\n\nconsole.log('=== Ultra-Enhanced Advice Parser v3.0 ===');\nconsole.log('Input Type:', typeof aiResponse);\nconsole.log('Input preview:', JSON.stringify(aiResponse).substring(0, 200));\n\nlet responseText = aiResponse.output || aiResponse.text || JSON.stringify(aiResponse);\nlet advice = null;\nlet parseMethod = 'unknown';\n\n// CRITICAL: Method 0 - Unescape multiply-encoded JSON strings\nlet unescapedText = responseText;\nlet unescapeAttempts = 0;\nconst MAX_UNESCAPE = 5;\n\nwhile (unescapeAttempts < MAX_UNESCAPE && (unescapedText.includes('\\\\n') || unescapedText.includes('\\\\\"'))) {\n  try {\n    // Attempt to parse as JSON string (which automatically unescapes)\n    const parsed = JSON.parse(unescapedText);\n    \n    if (typeof parsed === 'object' && parsed !== null) {\n      // If we got an object, check if it's already our advice\n      if (parsed.advice_type || parsed.main_advice) {\n        advice = parsed;\n        parseMethod = `direct_parse_unescape_${unescapeAttempts}`;\n        console.log(`Found advice object after ${unescapeAttempts} unescape attempts`);\n        break;\n      } else if (parsed.advice && typeof parsed.advice === 'object') {\n        advice = parsed.advice;\n        parseMethod = `nested_advice_unescape_${unescapeAttempts}`;\n        console.log(`Found nested advice after ${unescapeAttempts} unescape attempts`);\n        break;\n      }\n    } else if (typeof parsed === 'string') {\n      // Got a string, need to unescape more\n      unescapedText = parsed;\n      unescapeAttempts++;\n      console.log(`Unescaped level ${unescapeAttempts}`);\n    } else {\n      break;\n    }\n  } catch (e) {\n    // Manual unescaping fallback\n    console.log(`JSON parse failed at level ${unescapeAttempts}, trying manual unescape`);\n    unescapedText = unescapedText\n      .replace(/\\\\n/g, '\\n')\n      .replace(/\\\\\"/g, '\"')\n      .replace(/\\\\'/g, \"'\")\n      .replace(/\\\\t/g, '\\t')\n      .replace(/\\\\r/g, '\\r')\n      .replace(/\\\\\\\\/g, '\\\\');\n    unescapeAttempts++;\n    \n    // Try one more parse attempt\n    try {\n      const retryParse = JSON.parse(unescapedText);\n      if (typeof retryParse === 'object' && (retryParse.advice_type || retryParse.main_advice)) {\n        advice = retryParse;\n        parseMethod = `manual_unescape_${unescapeAttempts}`;\n        console.log(`Success after manual unescape ${unescapeAttempts}`);\n        break;\n      } else if (retryParse.advice) {\n        advice = retryParse.advice;\n        parseMethod = `manual_unescape_nested_${unescapeAttempts}`;\n        break;\n      }\n    } catch (e2) {}\n    \n    if (unescapeAttempts >= MAX_UNESCAPE) break;\n  }\n}\n\n// Update responseText with unescaped version for further parsing\nresponseText = unescapedText;\n\n// Method 1: Enhanced JSON object detection with multiple patterns\nif (!advice) {\n  try {\n    const patterns = [\n      /\\{[\\s\\S]*?\"advice_type\"[\\s\\S]*?\"main_advice\"[\\s\\S]*?\\}/,\n      /\\{[\\s\\S]*?\"type_conseil\"[\\s\\S]*?\"conseil_principal\"[\\s\\S]*?\\}/,\n      /\\{[\\s\\S]*?\"advice\"[\\s\\S]*?\"tips\"[\\s\\S]*?\\}/,\n      /\\{[\\s\\S]*?\"main_advice\"[\\s\\S]*?\"quick_tips\"[\\s\\S]*?\\}/\n    ];\n    \n    for (const pattern of patterns) {\n      const jsonMatch = responseText.match(pattern);\n      if (jsonMatch) {\n        let jsonString = jsonMatch[0];\n        \n        // Try multiple parsing strategies\n        const strategies = [\n          () => JSON.parse(jsonString),\n          () => JSON.parse(jsonString.replace(/\\\\n/g, '\\n').replace(/\\\\\"/g, '\"')),\n          () => JSON.parse(jsonString.replace(/[\\n\\r]/g, ' ').replace(/\\s+/g, ' ')),\n          () => { \n            // Remove trailing/leading whitespace and try again\n            const cleaned = jsonString.trim();\n            return JSON.parse(cleaned);\n          }\n        ];\n        \n        for (const strategy of strategies) {\n          try {\n            const parsed = strategy();\n            if (parsed.advice_type || parsed.main_advice || parsed.conseil_principal) {\n              advice = parsed;\n              parseMethod = 'enhanced_json_pattern';\n              console.log('Parsed with enhanced JSON pattern');\n              break;\n            }\n          } catch (e) {}\n        }\n        \n        if (advice) break;\n      }\n    }\n  } catch (e) {\n    console.log('Enhanced JSON parsing failed:', e.message);\n  }\n}\n\n// Method 2: Nested advice object extraction\nif (!advice) {\n  try {\n    const nestedPatterns = [\n      /\\{[\\s\\S]*?\"advice\"\\s*:\\s*\\{[\\s\\S]*?\\}[\\s\\S]*?\\}/,\n      /\\{[\\s\\S]*?\"conseil\"\\s*:\\s*\\{[\\s\\S]*?\\}[\\s\\S]*?\\}/,\n      /\\{[\\s\\S]*?\"data\"\\s*:\\s*\\{[\\s\\S]*?\"advice_type\"[\\s\\S]*?\\}[\\s\\S]*?\\}/\n    ];\n    \n    for (const pattern of nestedPatterns) {\n      const objectMatch = responseText.match(pattern);\n      if (objectMatch) {\n        try {\n          const parsed = JSON.parse(objectMatch[0]);\n          if (parsed.advice && typeof parsed.advice === 'object') {\n            advice = parsed.advice;\n            parseMethod = 'nested_advice_object';\n            console.log('Found nested advice object');\n            break;\n          } else if (parsed.conseil) {\n            advice = parsed.conseil;\n            parseMethod = 'nested_conseil_object';\n            break;\n          } else if (parsed.data && parsed.data.advice_type) {\n            advice = parsed.data;\n            parseMethod = 'nested_data_object';\n            break;\n          }\n        } catch (e) {}\n      }\n    }\n  } catch (e) {\n    console.log('Nested object parsing failed:', e.message);\n  }\n}\n\n// Method 3: Enhanced markdown code blocks\nif (!advice) {\n  try {\n    const codeBlocks = responseText.match(/```(?:json)?\\s*([\\s\\S]*?)```/g);\n    if (codeBlocks) {\n      for (const block of codeBlocks) {\n        const content = block.replace(/```(?:json)?\\s*|```/g, '').trim();\n        try {\n          const parsed = JSON.parse(content);\n          if (parsed.advice_type || parsed.main_advice || parsed.conseil_principal) {\n            advice = parsed;\n            parseMethod = 'markdown_json_block';\n            console.log('Parsed from markdown JSON block');\n            break;\n          } else if (parsed.advice) {\n            advice = parsed.advice;\n            parseMethod = 'markdown_nested_advice';\n            break;\n          }\n        } catch (e) {}\n      }\n    }\n  } catch (e) {\n    console.log('Markdown blocks parsing failed:', e.message);\n  }\n}\n\n// Method 4: Advanced structured text parsing\nif (!advice) {\n  const structuredAdvice = {\n    advice_type: 'G√©n√©ral',\n    main_advice: '',\n    quick_tips: [],\n    traditional_secrets: [],\n    ingredients_focus: {\n      recommended: [],\n      substitutes: [],\n      avoid: []\n    },\n    step_by_step: [],\n    cultural_context: '',\n    common_mistakes: [],\n    seasonal_notes: '',\n    difficulty_level: 'Interm√©diaire',\n    estimated_time: 'Variable'\n  };\n\n  // Extract main advice from the first substantial paragraph\n  const paragraphs = responseText.split(/\\n\\n+/).filter(p => p.trim().length > 50);\n  if (paragraphs.length > 0) {\n    structuredAdvice.main_advice = paragraphs[0].trim().substring(0, 1000);\n  }\n\n  // Enhanced tips extraction with multiple patterns\n  const tipsPatterns = [\n    /(?:Astuce|Conseil|Tips?)\\s*s?\\s*:?\\s*\\n([\\s\\S]*?)(?:\\n\\n|Secrets?|Erreurs?|$)/i,\n    /(?:Recommandations?)\\s*:?\\s*\\n([\\s\\S]*?)(?:\\n\\n|$)/i,\n    /(?:Points\\s+cl√©s?)\\s*:?\\s*\\n([\\s\\S]*?)(?:\\n\\n|$)/i\n  ];\n  \n  for (const pattern of tipsPatterns) {\n    const tipsMatch = responseText.match(pattern);\n    if (tipsMatch) {\n      structuredAdvice.quick_tips = tipsMatch[1]\n        .split(/\\n/)\n        .filter(line => line.trim().match(/^[-*‚Ä¢]|^\\d+\\./)) \n        .map(line => line.replace(/^[-*‚Ä¢]|^\\d+\\./, '').trim())\n        .filter(tip => tip.length > 15)\n        .slice(0, 6);\n      if (structuredAdvice.quick_tips.length > 0) break;\n    }\n  }\n\n  // Enhanced secrets extraction\n  const secretsPatterns = [\n    /(?:Secret|Tradition|Astuce\\s+de\\s+grand-m√®re)\\s*s?\\s*:?\\s*\\n([\\s\\S]*?)(?:\\n\\n|Ingr√©dients?|Erreurs?|$)/i,\n    /(?:Technique\\s+traditionnelle)\\s*s?\\s*:?\\s*\\n([\\s\\S]*?)(?:\\n\\n|$)/i\n  ];\n  \n  for (const pattern of secretsPatterns) {\n    const secretsMatch = responseText.match(pattern);\n    if (secretsMatch) {\n      structuredAdvice.traditional_secrets = secretsMatch[1]\n        .split(/\\n/)\n        .filter(line => line.trim().match(/^[-*‚Ä¢]|^\\d+\\./)) \n        .map(line => line.replace(/^[-*‚Ä¢]|^\\d+\\./, '').trim())\n        .filter(s => s.length > 20)\n        .slice(0, 4);\n      if (structuredAdvice.traditional_secrets.length > 0) break;\n    }\n  }\n\n  // Enhanced ingredients focus extraction\n  const ingredientsMatch = responseText.match(/(?:Ingr√©dients?)\\s*:?\\s*\\n([\\s\\S]*?)(?:\\n\\n|Erreurs?|$)/i);\n  if (ingredientsMatch) {\n    const ingredientText = ingredientsMatch[1];\n    \n    // Recommended ingredients\n    const recommendedMatch = ingredientText.match(/(?:Recommand√©|Utiliser|Privil√©gier)\\s*:?\\s*([^\\n]*)/i);\n    if (recommendedMatch) {\n      structuredAdvice.ingredients_focus.recommended = recommendedMatch[1]\n        .split(/,|;/)\n        .map(ing => ing.trim())\n        .filter(ing => ing.length > 3);\n    }\n    \n    // Substitutes\n    const substitutesMatch = ingredientText.match(/(?:Substitut|Remplacer|Alternative)\\s*:?\\s*([^\\n]*)/i);\n    if (substitutesMatch) {\n      structuredAdvice.ingredients_focus.substitutes = substitutesMatch[1]\n        .split(/,|;/)\n        .map(sub => sub.trim())\n        .filter(sub => sub.length > 3);\n    }\n  }\n\n  // Enhanced step-by-step extraction\n  const stepsMatch = responseText.match(/(?:√âtapes?|Steps?|M√©thode)\\s*:?\\s*\\n([\\s\\S]*?)(?:\\n\\n|Conseils?|$)/i);\n  if (stepsMatch) {\n    const stepLines = stepsMatch[1]\n      .split(/\\n/)\n      .filter(line => line.trim().match(/^[-*‚Ä¢]|^\\d+\\./)) \n      .slice(0, 5);\n      \n    structuredAdvice.step_by_step = stepLines.map((line, index) => {\n      const cleaned = line.replace(/^[-*‚Ä¢]|^\\d+\\./, '').trim();\n      return {\n        step: index + 1,\n        action: cleaned,\n        tip: ''\n      };\n    }).filter(step => step.action.length > 15);\n  }\n\n  // Enhanced mistakes extraction\n  const mistakesPatterns = [\n    /(?:Erreurs?\\s+courantes?|Mistakes?|√Ä\\s+√©viter)\\s*:?\\s*\\n([\\s\\S]*?)(?:\\n\\n|$)/i,\n    /(?:Probl√®mes?\\s+fr√©quents?)\\s*:?\\s*\\n([\\s\\S]*?)(?:\\n\\n|$)/i\n  ];\n  \n  for (const pattern of mistakesPatterns) {\n    const mistakesMatch = responseText.match(pattern);\n    if (mistakesMatch) {\n      structuredAdvice.common_mistakes = mistakesMatch[1]\n        .split(/\\n/)\n        .filter(line => line.trim().match(/^[-*‚Ä¢]|^\\d+\\./)) \n        .map(line => line.replace(/^[-*‚Ä¢]|^\\d+\\./, '').trim())\n        .filter(mistake => mistake.length > 20)\n        .slice(0, 4);\n      if (structuredAdvice.common_mistakes.length > 0) break;\n    }\n  }\n\n  // Extract cultural context\n  const culturalMatch = responseText.match(/(?:Culture|Tradition|Cameroun)\\s*:?\\s*([^\\n]{50,})/i);\n  if (culturalMatch) {\n    structuredAdvice.cultural_context = culturalMatch[1].trim();\n  }\n\n  if (structuredAdvice.main_advice || structuredAdvice.quick_tips.length > 0) {\n    advice = structuredAdvice;\n    parseMethod = 'advanced_text_extraction';\n    console.log('Extracted from advanced structured text');\n  }\n}\n\n// Enhanced fallback with comprehensive default advice\nif (!advice) {\n  const query = $('Request Preprocessor').item.json.query || 'question culinaire';\n  const adviceType = $('Request Preprocessor').item.json.advice_type || 'G√©n√©ral';\n  \n  advice = {\n    advice_type: adviceType,\n    main_advice: `Pour r√©ussir parfaitement vos plats camerounais traditionnels, voici des conseils essentiels bas√©s sur les techniques ancestrales de nos grand-m√®res. L'utilisation d'ingr√©dients frais et authentiquement locaux constitue la base fondamentale de toute bonne cuisine camerounaise. Les √©pices doivent √™tre dos√©es avec pr√©cision et patience pour respecter l'√©quilibre d√©licat des saveurs. La cuisson lente et attentive permet aux ar√¥mes de se d√©velopper pleinement et aux textures d'atteindre leur perfection. N'h√©sitez jamais √† adapter les recettes selon la disponibilit√© saisonni√®re des ingr√©dients tout en pr√©servant l'essence traditionnelle du plat.`,\n    quick_tips: [\n      \"Toujours utiliser des ingr√©dients frais et de saison pour une qualit√© gustative optimale\",\n      \"Respecter scrupuleusement les temps de cuisson traditionnels pour d√©velopper toutes les saveurs\",\n      \"Doser progressivement les √©pices en go√ªtant r√©guli√®rement pendant la pr√©paration\",\n      \"Pr√©parer certains ingr√©dients la veille pour optimiser le temps de cuisson\",\n      \"Conserver les restes dans des contenants herm√©tiques au r√©frig√©rateur maximum 3 jours\",\n      \"R√©chauffer les plats doucement pour pr√©server toutes leurs qualit√©s organoleptiques\"\n    ],\n    traditional_secrets: [\n      \"Le secret ancestral: laisser mijoter √† feu tr√®s doux pour concentrer naturellement tous les ar√¥mes\",\n      \"Moudre les √©pices fra√Æches juste avant utilisation pour lib√©rer leur parfum maximal\",\n      \"Utiliser exclusivement l'huile de palme rouge authentique pour le go√ªt traditionnel inimitable\",\n      \"Remuer avec une cuill√®re en bois pour pr√©server les saveurs et √©viter l'oxydation\"\n    ],\n    ingredients_focus: {\n      recommended: [\"√âpices locales fra√Æchement moulues\", \"L√©gumes de saison du march√©\", \"Huile de palme rouge authentique\", \"Piments frais selon tol√©rance\", \"Poissons fum√©s traditionnels\"],\n      substitutes: [\"Beurre de cacahu√®te naturel pour remplacer l'huile d'arachide\", \"√âpinards frais pour certaines feuilles traditionnelles non disponibles\", \"Gingembre frais si pas de gingembre s√©ch√©\"],\n      avoid: [\"Ingr√©dients transform√©s industriellement et additifs artificiels\", \"√âpices p√©rim√©es ou de mauvaise qualit√©\", \"Huiles raffin√©es d√©natur√©es\"]\n    },\n    step_by_step: [\n      {step: 1, action: \"Organiser et pr√©parer soigneusement tous les ingr√©dients avant de commencer\", tip: \"Une cuisine bien organis√©e facilite grandement la r√©alisation\"},\n      {step: 2, action: \"Respecter l'ordre traditionnel d'incorporation des diff√©rents ingr√©dients\", tip: \"Certains ingr√©dients n√©cessitent plus de temps pour r√©v√©ler leurs saveurs\"},\n      {step: 3, action: \"Go√ªter et ajuster l'assaisonnement de mani√®re progressive et r√©fl√©chie\", tip: \"Il est toujours plus facile d'ajouter des √©pices que d'en retirer\"},\n      {step: 4, action: \"Surveiller attentivement la cuisson et ajuster le feu si n√©cessaire\", tip: \"Chaque feu et chaque ustensile ont leurs particularit√©s\"}\n    ],\n    cultural_context: \"La cuisine camerounaise authentique repr√©sente un patrimoine culturel exceptionnel, refl√©tant la diversit√© et la richesse des traditions de plus de 250 ethnies diff√©rentes. Chaque r√©gion du Cameroun apporte ses sp√©cialit√©s uniques et ses techniques culinaires sp√©cifiques, transmises fid√®lement de g√©n√©ration en g√©n√©ration depuis des si√®cles. Cette cuisine est bien plus qu'une simple alimentation : elle constitue un v√©ritable lien social et culturel, un moyen d'expression de l'identit√© et de l'hospitalit√© l√©gendaire camerounaise.\",\n    common_mistakes: [\n      \"Ne pas laisser mijoter suffisamment longtemps - Solution: Respecter imp√©rativement les temps de cuisson indiqu√©s dans les recettes traditionnelles\",\n      \"Ajouter trop d'√©pices d'un seul coup - Solution: Incorporer les √©pices progressivement en go√ªtant r√©guli√®rement pour ajuster\",\n      \"Utiliser des ingr√©dients de qualit√© m√©diocre - Solution: Privil√©gier syst√©matiquement le frais, le local et l'authentique\",\n      \"Cuire √† feu trop vif - Solution: Pr√©f√©rer une cuisson douce et patiente pour d√©velopper les ar√¥mes\"\n    ],\n    seasonal_notes: \"Adapter intelligemment les recettes selon la disponibilit√© saisonni√®re des ingr√©dients locaux pour un r√©sultat optimal et un respect authentique des traditions culinaires camerounaises. La saison des pluies offre des l√©gumes-feuilles exceptionnels, tandis que la saison s√®che favorise certains fruits et l√©gumes.\",\n    difficulty_level: \"Interm√©diaire\",\n    estimated_time: \"Variable selon la complexit√© du plat (30 minutes √† 3 heures)\"\n  };\n  parseMethod = 'comprehensive_fallback';\n  console.log('Using comprehensive fallback advice');\n}\n\n// Enhanced validation and normalization\nif (advice) {\n  // Ensure all required fields exist with proper defaults\n  advice.advice_type = advice.advice_type || advice.type || 'G√©n√©ral';\n  advice.main_advice = advice.main_advice || advice.conseil_principal || advice.advice || 'Conseil culinaire traditionnel camerounais';\n  \n  // CRITICAL: Remove any remaining escape characters from main_advice\n  if (typeof advice.main_advice === 'string') {\n    advice.main_advice = advice.main_advice\n      .replace(/\\\\n/g, ' ')\n      .replace(/\\\\\"/g, '\"')\n      .replace(/\\\\\\\\/g, '\\\\')\n      .replace(/\\s+/g, ' ')\n      .replace(/[*#`]/g, '')\n      .trim();\n  }\n  \n  advice.quick_tips = Array.isArray(advice.quick_tips) ? advice.quick_tips : [];\n  advice.traditional_secrets = Array.isArray(advice.traditional_secrets) ? advice.traditional_secrets : [];\n  advice.common_mistakes = Array.isArray(advice.common_mistakes) ? advice.common_mistakes : [];\n  \n  // Ensure ingredients_focus structure exists\n  if (!advice.ingredients_focus || typeof advice.ingredients_focus !== 'object') {\n    advice.ingredients_focus = {\n      recommended: [],\n      substitutes: [],\n      avoid: []\n    };\n  }\n  \n  // Ensure step_by_step is properly structured\n  if (!Array.isArray(advice.step_by_step)) {\n    advice.step_by_step = [];\n  }\n  \n  // Clean and validate text fields - remove escape sequences\n  advice.cultural_context = (advice.cultural_context || '').replace(/\\\\n/g, ' ').replace(/\\\\\"/g, '\"').replace(/[*#`]/g, '').trim();\n  advice.seasonal_notes = (advice.seasonal_notes || '').replace(/\\\\n/g, ' ').replace(/\\\\\"/g, '\"').replace(/[*#`]/g, '').trim();\n  \n  // Add comprehensive metadata\n  advice.generated_at = new Date().toISOString();\n  advice.language = 'fr';\n  advice.source = 'TchopIA AI Advisor';\n  advice.expertise_level = 'Traditional Cameroonian Cuisine';\n}\n\nconsole.log('Final advice parsed successfully');\nconsole.log('Parse method:', parseMethod);\nconsole.log('Advice type:', advice.advice_type);\nconsole.log('Tips count:', advice.quick_tips.length);\nconsole.log('Secrets count:', advice.traditional_secrets.length);\n\nreturn [{\n  success: true,\n  action: 'cooking_advice',\n  data_type: 'advice',\n  advice: advice,\n  parse_method: parseMethod,\n  timestamp: new Date().toISOString(),\n  metadata: {\n    source: 'sub_workflow_parser',\n    quality: parseMethod.includes('fallback') ? 'default' : 'ai_generated',\n    parser_version: '3.0_ultra_enhanced_unescaping',\n    completeness: {\n      has_main_advice: !!advice.main_advice && advice.main_advice.length > 50,\n      has_tips: advice.quick_tips.length > 0,\n      has_secrets: advice.traditional_secrets.length > 0,\n      has_cultural_context: !!advice.cultural_context,\n      has_structured_steps: advice.step_by_step.length > 0\n    },\n    advice_category: advice.advice_type\n  }\n}];"
      },
      "id": "69fc07f9-aeb3-405c-ad6c-4ca290308afb",
      "name": "Response Parser",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2080,
        -48
      ]
    },
    {
      "parameters": {
        "jsCode": "return [{\n  success: false,\n  action: 'cooking_advice',\n  error: 'generation_failed',\n  message: 'Impossible de g√©n√©rer le conseil',\n  timestamp: new Date().toISOString()\n}];"
      },
      "id": "9a00cf9d-f96a-418f-9bd9-ece44fcabb98",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2064,
        144
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Request Preprocessor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT-OSS:120b": {
      "ai_languageModel": [
        [
          {
            "node": "Advice AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Request Preprocessor": {
      "main": [
        [
          {
            "node": "Advice AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Advice AI Agent": {
      "main": [
        [
          {
            "node": "Response Parser",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f46bc964-5145-4c68-a8e7-5a660223d493",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "93ace94098d9f9dd844138bcf4397e622c6ea8d222af8db31040119d08e72bcf"
  },
  "id": "uMFHRt7rGUhqHNwU",
  "tags": []
}
