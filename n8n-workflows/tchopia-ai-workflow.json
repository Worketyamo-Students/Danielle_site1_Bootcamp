{
  "name": "tchopia-ai-workflow",
  "nodes": [
    {
      "parameters": {
        "model": "openai/gpt-oss-20b:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        5888,
        2672
      ],
      "id": "9ecd1635-3d18-45a0-bb86-43dc591fda77",
      "name": "ChatGPT",
      "credentials": {
        "openRouterApi": {
          "id": "mJYBEjoa3bYekCHO",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Request Validator and Router\nconst inputData = $input.all();\nconst requestBody = inputData[0].json.body || {};\n\nconsole.log('=== TchopIA Request Router ===');\nconsole.log('Raw Request:', JSON.stringify(requestBody, null, 2));\n\n// Extract request parameters\nconst query = requestBody.query || requestBody.message || '';\nconst explicitAction = requestBody.action || null;\nconst context = requestBody.context || {};\n\n// Validate request\nif (!query || query.trim().length === 0) {\n  throw new Error('Query cannot be empty');\n}\n\n// Determine action type\nlet determinedAction = explicitAction;\nlet confidence = 'high';\n\nif (!explicitAction) {\n  // Auto-detect action from query content\n  const queryLower = query.toLowerCase();\n  \n  // Recipe generation indicators\n  const recipeKeywords = [\n    'recette', 'comment pr√©parer', 'comment faire', 'cuisiner',\n    '√©tapes', 'ingr√©dients pour', 'pr√©paration de', 'cuisson',\n    'recipe', 'how to cook', 'how to make', 'prepare'\n  ];\n  \n  // Suggestion indicators\n  const suggestionKeywords = [\n    'sugg√®re', 'propose', 'recommande', 'id√©e', 'quoi cuisiner',\n    'que faire avec', 'j\\'ai', 'avec ces ingr√©dients',\n    'suggest', 'recommend', 'what can i', 'i have'\n  ];\n  \n  // Advice indicators\n  const adviceKeywords = [\n    'conseil', 'astuce', 'technique', 'comment am√©liorer',\n    'pourquoi', 'meilleure fa√ßon', 'secret', 'aide',\n    'advice', 'tip', 'help', 'how to improve', 'best way'\n  ];\n  \n  if (recipeKeywords.some(kw => queryLower.includes(kw))) {\n    determinedAction = 'generate_recipe';\n    confidence = 'medium';\n  } else if (suggestionKeywords.some(kw => queryLower.includes(kw))) {\n    determinedAction = 'get_suggestions';\n    confidence = 'medium';\n  } else if (adviceKeywords.some(kw => queryLower.includes(kw))) {\n    determinedAction = 'cooking_advice';\n    confidence = 'medium';\n  } else {\n    // Default to suggestions for general queries\n    determinedAction = 'get_suggestions';\n    confidence = 'low';\n  }\n}\n\n// Prepare routing data\nconst routingData = {\n  action: determinedAction,\n  query: query,\n  confidence: confidence,\n  explicit_action: !!explicitAction,\n  context: context,\n  timestamp: new Date().toISOString(),\n  session_id: inputData[0].json.headers?.['x-session-id'] || `session_${Date.now()}`,\n  user_agent: inputData[0].json.headers?.['user-agent'] || 'unknown'\n};\n\nconsole.log('Routing Decision:', routingData);\n\nreturn [routingData];"
      },
      "id": "8cd20030-fa83-476e-99df-cc1cfee087a5",
      "name": "Request Router",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6112,
        2352
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Request Router').item.json.session_id }}",
        "contextWindowLength": 10
      },
      "id": "80bfcee8-fd32-467e-b148-189ec816f815",
      "name": "Conversation Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        6304,
        2592
      ]
    },
    {
      "parameters": {
        "jsCode": "// Final Response Parser and Formatter\nconst inputData = $input.all();\nconst agentOutput = inputData[0].json;\n\nconsole.log('=== Final Response Parser ===');\nconsole.log('Agent Output:', JSON.stringify(agentOutput, null, 2));\n\nlet finalResponse;\n\ntry {\n  // Extract the actual response from agent output\n  let responseData = agentOutput.output || agentOutput.text || agentOutput;\n  \n  // If response is a string, try to parse as JSON\n  if (typeof responseData === 'string') {\n    try {\n      // Try to extract JSON from the string\n      const jsonMatch = responseData.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        responseData = JSON.parse(jsonMatch[0]);\n      }\n    } catch (parseError) {\n      console.log('String response, wrapping in structure');\n      responseData = {\n        success: true,\n        type: 'text',\n        data: { content: responseData },\n        message: 'R√©ponse g√©n√©r√©e'\n      };\n    }\n  }\n  \n  // Ensure response has required structure\n  if (!responseData.success && !responseData.error) {\n    responseData = {\n      success: true,\n      type: responseData.action || 'general',\n      data: responseData,\n      timestamp: new Date().toISOString()\n    };\n  }\n  \n  finalResponse = responseData;\n  \n} catch (error) {\n  console.error('Response parsing error:', error);\n  \n  finalResponse = {\n    success: false,\n    error: 'Response parsing failed',\n    message: 'Une erreur s\\'est produite lors du traitement de la r√©ponse',\n    debug: {\n      error: error.message,\n      raw_output: JSON.stringify(agentOutput).substring(0, 500)\n    },\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Add metadata\nfinalResponse.metadata = {\n  generated_at: new Date().toISOString(),\n  source: 'TchopIA AI Assistant',\n  version: '2.0',\n  session_id: $('Request Router').item.json.session_id\n};\n\nconsole.log('Final Response:', JSON.stringify(finalResponse, null, 2));\n\nreturn [finalResponse];"
      },
      "id": "9e71d053-e917-4a32-a5c4-7c5b4e5d7b17",
      "name": "Response Parser",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6752,
        2256
      ]
    },
    {
      "parameters": {
        "jsCode": "// Error Handler\nconst error = $input.all()[0].json;\n\nconsole.error('=== TchopIA Error ===');\nconsole.error('Error:', error);\n\nconst errorResponse = {\n  success: false,\n  error: 'request_failed',\n  message: 'D√©sol√©, une erreur s\\'est produite. Veuillez r√©essayer.',\n  suggestions: [\n    'Reformulez votre demande plus simplement',\n    'Assurez-vous que votre requ√™te est claire',\n    'R√©essayez dans quelques instants'\n  ],\n  support: {\n    error_id: `error_${Date.now()}`,\n    timestamp: new Date().toISOString()\n  },\n  metadata: {\n    source: 'TchopIA AI Assistant',\n    version: '2.0'\n  }\n};\n\nreturn [errorResponse];"
      },
      "id": "56be32e9-a976-4093-821d-6f721e8b5a1f",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6752,
        2432
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "=Vous √™tes TchopIA, l'assistant culinaire IA sp√©cialis√© en gastronomie camerounaise.\n\nüéØ VOTRE MISSION :\nVous avez acc√®s √† trois outils sp√©cialis√©s :\n1. **Suggestion Agent** - Pour proposer des plats camerounais bas√©s sur des ingr√©dients ou envies\n2. **Recipe Agent** - Pour g√©n√©rer des recettes compl√®tes et d√©taill√©es\n3. **Advice Agent** - Pour donner des conseils culinaires, techniques et astuces\n\nüìã ACTION DEMAND√âE : {{ $json.action }}\n{{ $json.explicit_action ? '(Action explicitement demand√©e par l\\'utilisateur)' : '(Action d√©tect√©e automatiquement - Confiance: ' + $json.confidence + ')' }}\n\nüîß DIRECTIVES DE ROUTAGE :\n\n**Si action = 'get_suggestions'** :\n- Utilisez le **Suggestion Agent**\n- Transmettez la requ√™te compl√®te de l'utilisateur\n- L'agent retournera 3-5 suggestions de plats camerounais\n\n**Si action = 'generate_recipe'** :\n- Utilisez le **Recipe Agent**\n- Transmettez le nom du plat et tout contexte pertinent\n- L'agent g√©n√©rera une recette compl√®te structur√©e\n\n**Si action = 'cooking_advice'** :\n- Utilisez l'**Advice Agent**\n- Transmettez la question ou probl√®me culinaire\n- L'agent fournira des conseils d√©taill√©s et pratiques\n\n‚ö° R√àGLES IMPORTANTES :\n1. Utilisez TOUJOURS l'outil appropri√© - ne r√©pondez JAMAIS directement\n2. Transmettez TOUTE la requ√™te de l'utilisateur √† l'outil\n3. Ne modifiez PAS la requ√™te avant de la transmettre\n4. Faites confiance aux agents sp√©cialis√©s pour le contenu\n5. Si l'action est incertaine, privil√©giez le Suggestion Agent\n\nüí¨ R√âPONSE ATTENDUE :\nVous devez simplement appeler l'outil appropri√© avec la requ√™te compl√®te.\nL'outil retournera une r√©ponse JSON structur√©e qui sera envoy√©e au frontend.\n\nSession ID: {{ $json.session_id }}\nTimestamp: {{ $json.timestamp }}"
        }
      },
      "id": "ab8928ac-9e87-4251-b6e4-98b4041877ca",
      "name": "Tchop AI1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        6336,
        2352
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "description": "Appel cet outil quand l'utilisateur demande des suggestions de plats camerounais, des id√©es de recettes, ou quand il mentionne des ingr√©dients disponibles. Transmet TOUTE la requ√™te de l'utilisateur telle quelle.",
        "workflowId": {
          "__rl": true,
          "value": "C60bVIonekWy8VAE",
          "mode": "list",
          "cachedResultName": "suggestion_generator"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ $json.query }}"
          }
        }
      },
      "id": "ff1b6af4-76bd-4ef0-8223-590a0138f992",
      "name": "Suggestion Agent1",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        6320,
        2912
      ]
    },
    {
      "parameters": {
        "description": "Appel cet outil quand l'utilisateur demande explicitement une recette compl√®te, des instructions de pr√©paration d√©taill√©es, ou comment cuisiner un plat sp√©cifique. Transmet le nom du plat et tout contexte pertinent.",
        "workflowId": {
          "__rl": true,
          "value": "coNDPEfojluaHvhC",
          "mode": "list",
          "cachedResultName": "recipe_generator"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ $json.query }}",
            "recipe_name": "={{ $json.context.recipe_name || '' }}",
            "recipe_description": "={{ $json.context.description || '' }}"
          }
        }
      },
      "id": "5127b6c8-3360-4af9-9f62-709cba68d20f",
      "name": "Recipe Agent1",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        6464,
        2912
      ]
    },
    {
      "parameters": {
        "description": "Appel cet outil quand l'utilisateur demande des conseils culinaires, des astuces de cuisine, des techniques de pr√©paration, ou des solutions √† des probl√®mes culinaires. Transmet toute la question ou probl√©matique.",
        "workflowId": {
          "__rl": true,
          "value": "uMFHRt7rGUhqHNwU",
          "mode": "list",
          "cachedResultName": "advice_generator"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ $json.query }}"
          }
        }
      },
      "id": "782b6554-eec2-4429-adc2-2821684cbec5",
      "name": "Advice Agent1",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        6656,
        2912
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-TchopIA-Version",
                "value": "2.0"
              }
            ]
          }
        }
      },
      "id": "3e282460-28ee-4e3d-a473-d597083279f6",
      "name": "Webhook Response1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        7040,
        2336
      ]
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        6992,
        2688
      ],
      "id": "1e3214e3-9a11-47da-9662-9ef0909fb8d4",
      "name": "Think1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        6832,
        2688
      ],
      "id": "279dedab-a11d-4b8e-9ac1-48c0d53c84d3",
      "name": "Calculator1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "tchopia-ai",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "d523e93e-0842-4683-b7d8-85adf78138d8",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        5888,
        2352
      ],
      "webhookId": "tchopia-ai"
    }
  ],
  "pinData": {},
  "connections": {
    "ChatGPT": {
      "ai_languageModel": [
        [
          {
            "node": "Tchop AI1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Request Router": {
      "main": [
        [
          {
            "node": "Tchop AI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Memory": {
      "ai_memory": [
        [
          {
            "node": "Tchop AI1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Response Parser": {
      "main": [
        [
          {
            "node": "Webhook Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Webhook Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tchop AI1": {
      "main": [
        [
          {
            "node": "Response Parser",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Suggestion Agent1": {
      "ai_tool": [
        [
          {
            "node": "Tchop AI1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Recipe Agent1": {
      "ai_tool": [
        [
          {
            "node": "Tchop AI1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Advice Agent1": {
      "ai_tool": [
        [
          {
            "node": "Tchop AI1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think1": {
      "ai_tool": [
        [
          {
            "node": "Tchop AI1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calculator1": {
      "ai_tool": [
        [
          {
            "node": "Tchop AI1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Request Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e9b63531-2bcd-4862-a851-2f27fa26eabe",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "93ace94098d9f9dd844138bcf4397e622c6ea8d222af8db31040119d08e72bcf"
  },
  "id": "JoXe0m2smmelZ163",
  "tags": [
    {
      "createdAt": "2025-10-04T17:23:26.364Z",
      "updatedAt": "2025-10-04T17:23:26.364Z",
      "id": "2vPFw1VrTaAUP2Ur",
      "name": "AI Agent"
    },
    {
      "createdAt": "2025-10-04T17:39:19.389Z",
      "updatedAt": "2025-10-04T17:39:19.389Z",
      "id": "ATThQ6Rj4oTUZKe1",
      "name": "User Features"
    },
    {
      "createdAt": "2025-10-04T17:23:26.346Z",
      "updatedAt": "2025-10-04T17:23:26.346Z",
      "id": "GMedB0cx9HIWyGlp",
      "name": "TchopIA"
    },
    {
      "createdAt": "2025-10-04T17:39:19.392Z",
      "updatedAt": "2025-10-04T17:39:19.392Z",
      "id": "HPEHodXiwvsHK7yG",
      "name": "Data Management"
    },
    {
      "createdAt": "2025-10-04T17:33:59.844Z",
      "updatedAt": "2025-10-04T17:33:59.844Z",
      "id": "QKLfRiv9LzDZIrva",
      "name": "Cameroonian Cuisine"
    },
    {
      "createdAt": "2025-10-04T17:39:19.370Z",
      "updatedAt": "2025-10-04T17:39:19.370Z",
      "id": "dMp7Hn3y7tP6eLle",
      "name": "TchopIA Advanced"
    },
    {
      "createdAt": "2025-10-04T17:33:59.838Z",
      "updatedAt": "2025-10-04T17:33:59.838Z",
      "id": "jzzJOEVaRkKNIi27",
      "name": "Culinary AI"
    },
    {
      "createdAt": "2025-10-05T11:41:31.085Z",
      "updatedAt": "2025-10-05T11:41:31.085Z",
      "id": "mYORG0HjBmw3LkTK",
      "name": "TchopIA AI"
    }
  ]
}